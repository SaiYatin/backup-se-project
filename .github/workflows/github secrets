#!/bin/bash
# ==================================================
# GitHub Secrets Setup Script
# ==================================================
# This script helps you gather all required secrets
# Then you manually add them to GitHub

echo "üîê GitHub Secrets Configuration Helper"
echo "========================================"
echo ""

# Function to generate JWT secret
generate_jwt_secret() {
    node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# ============================================
# 1. RAILWAY CONFIGURATION
# ============================================
echo "üìç Step 1: Railway Configuration"
echo "================================="
echo ""
echo "RAILWAY_TOKEN:"
echo "  1. Go to: https://railway.app/account/tokens"
echo "  2. Click 'Create Token'"
echo "  3. Copy the token"
echo "  4. Add to GitHub: Settings > Secrets > Actions"
echo ""
read -p "Press Enter when RAILWAY_TOKEN is configured..."
echo ""

echo "RAILWAY_PROJECT_ID:"
echo "  1. Go to your Railway dashboard"
echo "  2. Open your project"
echo "  3. Go to Settings"
echo "  4. Copy 'Project ID'"
echo ""
read -p "Press Enter when RAILWAY_PROJECT_ID is configured..."
echo ""

# ============================================
# 2. DATABASE CONFIGURATION
# ============================================
echo "üìç Step 2: Database Configuration"
echo "=================================="
echo ""
echo "DATABASE_URL:"
echo "  Get from Railway PostgreSQL service"
echo "  Format: postgresql://user:password@host:port/database"
echo "  Example: postgresql://postgres:password123@containers-us-west-1.railway.app:7432/railway"
echo ""
read -p "Press Enter when DATABASE_URL is configured..."
echo ""

# ============================================
# 3. JWT SECRET
# ============================================
echo "üìç Step 3: JWT Secret Generation"
echo "================================="
echo ""
echo "Generating JWT_SECRET..."
JWT_SECRET=$(generate_jwt_secret)
echo ""
echo "JWT_SECRET (copy this):"
echo "$JWT_SECRET"
echo ""
echo "Add this to GitHub Secrets as JWT_SECRET"
echo ""
read -p "Press Enter when JWT_SECRET is configured..."
echo ""

# ============================================
# 4. VERCEL CONFIGURATION
# ============================================
echo "üìç Step 4: Vercel Configuration"
echo "================================"
echo ""
echo "VERCEL_TOKEN:"
echo "  1. Go to: https://vercel.com/account/tokens"
echo "  2. Click 'Create'"
echo "  3. Copy the token"
echo ""
read -p "Press Enter when VERCEL_TOKEN is configured..."
echo ""

echo "VERCEL_ORG_ID and VERCEL_PROJECT_ID:"
if command_exists vercel; then
    echo "Vercel CLI detected! Setting up..."
    echo ""
    cd frontend
    vercel link
    echo ""
    if [ -f .vercel/project.json ]; then
        echo "Project configured! Here are your IDs:"
        echo ""
        VERCEL_ORG_ID=$(cat .vercel/project.json | grep -o '"orgId": "[^"]*' | cut -d'"' -f4)
        VERCEL_PROJECT_ID=$(cat .vercel/project.json | grep -o '"projectId": "[^"]*' | cut -d'"' -f4)
        echo "VERCEL_ORG_ID: $VERCEL_ORG_ID"
        echo "VERCEL_PROJECT_ID: $VERCEL_PROJECT_ID"
        echo ""
    else
        echo "Error: Could not find .vercel/project.json"
        echo "Please run 'vercel' manually in the frontend directory"
    fi
    cd ..
else
    echo "  Vercel CLI not installed. Install with:"
    echo "  npm install -g vercel"
    echo ""
    echo "  Then run: vercel"
    echo "  And check .vercel/project.json for orgId and projectId"
fi
echo ""
read -p "Press Enter when VERCEL_ORG_ID and VERCEL_PROJECT_ID are configured..."
echo ""

# ============================================
# 5. API BASE URL
# ============================================
echo "üìç Step 5: API Base URL"
echo "======================="
echo ""
echo "VITE_API_BASE_URL:"
echo "  Your Railway backend URL with /api suffix"
echo "  Example: https://your-app.up.railway.app/api"
echo ""
read -p "Press Enter when VITE_API_BASE_URL is configured..."
echo ""

# ============================================
# OPTIONAL: BACKEND_URL for health checks
# ============================================
echo "üìç Step 6: Optional - Backend Health Check URL"
echo "=============================================="
echo ""
echo "BACKEND_URL (optional):"
echo "  Your Railway backend URL (without /api)"
echo "  Used for deployment health checks"
echo "  Example: https://your-app.up.railway.app"
echo ""
read -p "Press Enter to continue (skip if not needed)..."
echo ""

# ============================================
# SUMMARY
# ============================================
echo "‚úÖ Configuration Complete!"
echo "========================="
echo ""
echo "üìã Summary of Required Secrets:"
echo "--------------------------------"
echo "Backend Deployment:"
echo "  ‚úì RAILWAY_TOKEN"
echo "  ‚úì RAILWAY_PROJECT_ID"
echo "  ‚úì DATABASE_URL"
echo "  ‚úì JWT_SECRET"
echo "  ‚ö¨ BACKEND_URL (optional)"
echo ""
echo "Frontend Deployment:"
echo "  ‚úì VERCEL_TOKEN"
echo "  ‚úì VERCEL_ORG_ID"
echo "  ‚úì VERCEL_PROJECT_ID"
echo "  ‚úì VITE_API_BASE_URL"
echo ""
echo "üîó Add secrets at:"
echo "https://github.com/YOUR_USERNAME/YOUR_REPO/settings/secrets/actions"
echo ""
echo "üìù Next Steps:"
echo "1. Ensure all secrets are added to GitHub"
echo "2. Update .gitignore files (remove package-lock.json exclusion)"
echo "3. Run: npm install in backend and frontend"
echo "4. Commit package-lock.json files"
echo "5. Update workflow files with fixed versions"
echo "6. Push to main branch"
echo "7. Monitor GitHub Actions for successful deployment"
echo ""
echo "üéâ Done! Your CI/CD pipeline should now work correctly."